@page "/speakers"
@using EventFlow.Core.Models.DTOs
@inject HttpClient Http

<PageTitle>Palestrantes</PageTitle>

<h1>Palestrantes</h1>

@if (isLoading)
{
    <p><em>@loadingStatus</em></p>
}
else if (speakers == null || speakers.Count == 0)
{
    <p>Nenhum palestrante encontrado ou falha ao carregar.</p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Nome</th>
                <th>Email</th>
                <th>Bio</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var speaker in speakers)
            {
                <tr>
                    <td>@speaker.Name</td>
                    <td>@speaker.Email</td>
                    <td>@speaker.Biography</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<SpeakerDTO>? speakers;
    private bool isLoading = true;
    private string loadingStatus = "Iniciando...";

    private System.Text.Json.JsonSerializerOptions jsonOptions = new()
    {
        PropertyNameCaseInsensitive = true,
            Converters = { new EventFlow.WebApp.Helpers.DateTimeConverterHelper() }
    };

    protected override async Task OnInitializedAsync()
    {
        try
        {
            loadingStatus = "Buscando dados da API...";
            await InvokeAsync(StateHasChanged);

            speakers = await Http.GetFromJsonAsync<List<SpeakerDTO>>("speaker/all", jsonOptions);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"EXCEÇÃO CAPTURADA: {ex.ToString()}");
            loadingStatus = $"Ocorreu um erro: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }
}