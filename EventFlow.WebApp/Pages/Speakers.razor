@page "/speakers"
@using EventFlow.Core.Models.DTOs
@using EventFlow.WebApp.Helpers
@inject HttpClient Http

<PageTitle>Palestrantes</PageTitle>

<div class="container py-4">
    <h1 class="mb-4">Nossos Palestrantes</h1>

    @if (speakers == null)
    {
        <p><em>Carregando...</em></p>
    }
    else if (speakers.Count == 0)
    {
        <p>Nenhum palestrante encontrado.</p>
    }
    else
    {
        <div class="speaker-grid">
            @foreach (var speaker in speakers)
            {
                <div class="speaker-card">
                    <img src="https://i.pravatar.cc/150?u=@speaker.Email" class="card-avatar" alt="Avatar do Palestrante">
                    <div class="card-body">
                        <h4 class="card-title">@speaker.Name</h4>
                        <p class="card-bio">"@speaker.Biography"</p>
                        <p class="card-info">
                            <i class="bi bi-envelope-fill"></i>
                            <span>@speaker.Email</span>
                        </p>
                        <a href="#" class="btn btn-outline-primary mt-3">Ver Detalhes</a>
                    </div>
                </div>
            }
        </div>
    }
</div>

@code {
    private List<SpeakerDTO>? speakers;
    private bool isLoading = true;
    private string loadingStatus = "Iniciando...";

    private System.Text.Json.JsonSerializerOptions jsonOptions = new()
    {
        PropertyNameCaseInsensitive = true,
            Converters = { new EventFlow.WebApp.Helpers.DateTimeConverterHelper() }
    };

    protected override async Task OnInitializedAsync()
    {
        try
        {
            loadingStatus = "Buscando dados da API...";
            await InvokeAsync(StateHasChanged);

            speakers = await Http.GetFromJsonAsync<List<SpeakerDTO>>("speaker/all", jsonOptions);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"EXCEÇÃO CAPTURADA: {ex.ToString()}");
            loadingStatus = $"Ocorreu um erro: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }
}