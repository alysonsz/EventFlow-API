@page "/events"
@using EventFlow.Core.Models
@using EventFlow.Core.Models.DTOs
@using EventFlow.WebApp.Helpers
@inject HttpClient Http

<PageTitle>Eventos</PageTitle>

<h1>Lista de Eventos</h1>

@if (isLoading)
{
    <p><em>@loadingStatus</em></p>
}
else if (events == null || events.Count == 0)
{
    <p>Nenhum evento encontrado ou falha ao carregar.</p>
}
else
{
    <table class = "table">
        <thead>
            <tr>
                <th>Título</th>
                <th>Data</th>
                <th>Local</th>
                <th>Organizador</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var ev in events)
            {
                <tr>
                    <td>@ev.Title</td>
                    <td>@ev.Date.ToString("dd/MM/yyyy")</td>
                    <td>@ev.Location</td>
                    <td>@(ev.Organizer?.Name ?? "N/A")</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<EventDTO>? events;
    private bool isLoading = true;
    private string loadingStatus = "Iniciando...";

    private System.Text.Json.JsonSerializerOptions jsonOptions = new()
    {
            PropertyNameCaseInsensitive = true,
            Converters = { new DateTimeConverterHelper() }
    };
    protected override async Task OnInitializedAsync()
    {
        try
        {
            loadingStatus = "Buscando dados da API...";
            await InvokeAsync(StateHasChanged);

            events = await Http.GetFromJsonAsync<List<EventDTO>>("event/all", jsonOptions);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"EXCEÇÃO CAPTURADA: {ex.ToString()}");
            loadingStatus = $"Ocorreu um erro: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }
}
