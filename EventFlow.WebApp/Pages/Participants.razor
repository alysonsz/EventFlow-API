@page "/participants"
@using EventFlow.Core.Models.DTOs
@using EventFlow.WebApp.Helpers
@inject HttpClient Http

<PageTitle>Participantes por Evento</PageTitle>

<div class="container py-4">
    <h1 class="mb-3">Buscar Participantes por Evento</h1>
    <p class="text-muted mb-4">Insira o ID de um evento para ver a lista de participantes inscritos.</p>

    <div class="input-group mb-4" style="max-width: 500px;">
        <input @bind="eventId" @onkeyup="HandleInput" type="text" class="form-control" placeholder="Digite o ID do Evento (GUID)" />
        <button @onclick="SearchParticipants" class="btn btn-primary" type="button" disabled="@isLoading">
            @if (isLoading)
            {
                <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                <span class="visually-hidden">Buscando...</span>
            }
            else
            {
                <i class="bi bi-search"></i> <span>Buscar</span>
            }
        </button>
    </div>

    <hr />

    @if (searchPerformed && !isLoading && (participants == null || participants.Count == 0))
    {
        <div class="alert alert-warning" role="alert">
            Nenhum participante encontrado para o evento com o ID fornecido.
        </div>
    }
    else if (participants != null && participants.Count > 0)
    {
        <div class="organizer-grid">
            @foreach (var participant in participants)
            {
                <div class="organizer-card">
                    <img src="https://i.pravatar.cc/150?u=@participant.Id" class="card-avatar" alt="Avatar do Participante">
                    <div class="card-body">
                        <h4 class="card-title">@participant.Name</h4>
                        <p class="card-info">
                            <i class="bi bi-envelope-fill"></i>
                            <span>@participant.Email</span>
                        </p>
                    </div>
                </div>
            }
        </div>
    }
</div>


@code {
    private List<ParticipantDTO>? participants;
    private bool isLoading = false;
    private bool searchPerformed = false;
    private string eventId = string.Empty;

    private System.Text.Json.JsonSerializerOptions jsonOptions = new()
        {
            PropertyNameCaseInsensitive = true,
            Converters = { new DateTimeConverterHelper() }
        };

    private async Task HandleInput(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await SearchParticipants();
        }
    }

    private async Task SearchParticipants()
    {
        if (string.IsNullOrWhiteSpace(eventId)) return;

        isLoading = true;
        searchPerformed = true;
        participants = null;

        try
        {
            var url = $"participant/{eventId}/all";
            participants = await Http.GetFromJsonAsync<List<ParticipantDTO>>(url, jsonOptions);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erro ao buscar participantes: {ex.Message}");
            participants = new List<ParticipantDTO>();
        }
        finally
        {
            isLoading = false;
        }
    }
}